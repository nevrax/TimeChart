{"version":3,"file":"timechart.min.js","sources":["../../src/options.ts","../../src/core/canvasLayer.ts","../../src/core/contentBoxDetector.ts","../../src/utils.ts","../../src/core/nearestPoint.ts","../../src/core/renderModel.ts","../../src/core/svgLayer.ts","../../src/core/dataPointsBuffer.ts","../../src/core/index.ts","../../src/chartZoom/options.ts","../../src/chartZoom/utils.ts","../../src/chartZoom/mouse.ts","../../src/chartZoom/touch.ts","../../src/chartZoom/wheel.ts","../../src/chartZoom/index.ts","../../src/plugins/chartZoom.ts","../../src/plugins/crosshair.ts","../../src/plugins/d3Axis.ts","../../src/plugins/legend.ts","../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/quat.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/vec2.js","../../src/plugins/webGLUtils.ts","../../src/plugins/lineChart.ts","../../src/plugins/nearestPoint.ts","../../src/plugins/tooltip.ts","../../src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();",null,null,null,null,null],"names":["LineType","resolveColorRGBA","color","rgbColor","rgb","r","g","b","opacity","CanvasLayer","constructor","el","options","model","this","canvas","document","createElement","style","position","width","height","left","right","top","bottom","shadowRoot","appendChild","gl","ctx","getContext","Error","bgColor","backgroundColor","clearColor","updated","on","clear","syncViewport","resized","w","h","onResize","disposing","removeChild","lossContext","getExtension","loseContext","o","pixelRatio","viewport","renderPaddingLeft","renderPaddingBottom","renderPaddingRight","renderPaddingTop","scale","COLOR_BUFFER_BIT","ContentBoxDetector","node","paddingLeft","paddingRight","paddingTop","paddingBottom","domainSearch","data","start","end","value","key","minDomain","maxDomain","ratio","expectedIndex","Math","ceil","EventDispatcher","callbacks","callback","push","dispatch","args","cb","NearestPointModel","detector","dataPoints","Map","lastPointerPos","addEventListener","ev","rect","getBoundingClientRect","x","clientX","y","clientY","adjustPoints","domain","xScale","invert","s","series","length","visible","delete","pos","d","near","sortKey","a","abs","sort","pxPoint","clientWidth","clientHeight","set","calcMinMaxY","arr","max","Infinity","min","i","v","RenderModel","scaleLinear","yScale","xRange","yRange","abortController","AbortController","redrawRequested","resize","op","range","requestRedraw","dispose","signal","aborted","abort","update","updateModel","_synced","filter","map","realTime","currentDomain","minMaxY","flatMap","pushed_front","pushed_back","items","unionMinMax","nice","requestAnimationFrame","time","dataPoint","SVGLayer","svgNode","createElementNS","DataPointsBuffer","Array","super","arguments","poped_back","poped_front","static","Object","setPrototypeOf","prototype","pop","len","undefined","unshift","shift","updateDelete","deleteCount","c","RangeError","updateInsert","insertCount","splice","expectedLen","defaultOptions","window","devicePixelRatio","lineWidth","baseTime","xScaleType","scaleTime","debugWebGL","forceWebGL1","legend","defaultSeriesOptions","name","lineType","Line","stepLocation","completeSeriesOptions","_from_array","TimeChart","disposed","coreOptions","dynamicDefaults","getComputedStyle","getPropertyValue","assign","completeOptions","_a","attachShadow","mode","innerText","canvasLayer","svgLayer","contentBoxDetector","nearestPoint","_options","plugins","fromEntries","entries","_b","p","apply","resizeHandler","removeEventListener","isPrototypeOf","DIRECTION","dirOptions","dir","X","Y","scaleK","applyNewDomain","inExtent","previousDomain","extent","maxDomainExtent","minDomainExtent","deltaE","deltaO","eps","rows","_","row","zip","some","pd","clamp","ChartZoomMouse","scaleUpdated","previousPoint","userSelect","onMouseDown","onMouseUp","onMouseMove","point","boundingRect","event","changed","offset","k","pointerType","buttons","panMouseButtons","setPointerCapture","pointerId","cursor","releasePointerCapture","ChartZoomTouch","majorDirection","UNKNOWN","previousPoints","enabled","e","onTouchStart","passive","onTouchEnd","onTouchMove","syncEnabled","syncTouchAction","actions","touchAction","join","calcKB","mean","reduce","variance","sumX","sumY","sumXY","sumXX","det","linearRegression","t","current","touchPoints","touches","touchMinPoints","boundingBox","ts","identifier","temp","id","get","vari","varX","varY","ChartZoomWheel","onWheel","preventDefault","deltaX","deltaY","deltaMode","transform","translate","zoom","ctrlKey","metaKey","altKey","origin","trans","transOrigin","shiftKey","translateCap","zoomCap","defaultAxisOptions","resolveOptions","defaults","resolveAxis","ao","ChartZoom","touch","mouse","wheel","onScaleUpdated","TimeChartZoom","chart","registerZoom","applyAutoRange","dataRange","autoRange","create","z","TimeChartZoomPlugin","crosshair","contentBox","contentSvg","classList","add","baseVal","makeContentBox","initTrans","createSVGTransform","setTranslate","textContent","hLine","initialize","x2","newValueSpecifiedUnits","SVGLength","SVG_LENGTHTYPE_PERCENTAGE","vLine","y2","contentRect","getItem","visibility","d3Axis","d3Svg","select","xg","append","yg","xAxis","axisBottom","yAxis","axisLeft","xs","xts","call","attr","Legend","ls","legendRoot","itemContainer","display","has","item","className","example","toggle","toString","ARRAY_TYPE","Float32Array","out","glMatrix.ARRAY_TYPE","fromValues","hypot","sqrt","vec","vec3.create","vec3.fromValues","LinkedWebGLProgram","vertexSource","fragmentSource","debug","program","throwIfFalsy","createProgram","attachShader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","link","linkProgram","getProgramParameter","LINK_STATUS","message","getProgramInfoLog","deleteProgram","getUniformLocation","use","useProgram","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","BUFFER_TEXTURE_WIDTH","BUFFER_TEXTURE_HEIGHT","BUFFER_POINT_CAPACITY","BUFFER_INTERVAL_CAPACITY","ShaderUniformData","size","ArrayBuffer","ubo","createBuffer","bindBuffer","UNIFORM_BUFFER","bufferData","DYNAMIC_DRAW","modelScale","modelTranslate","projectionScale","upload","index","bindBufferBase","bufferSubData","VS_HEADER","LINE_FS_SOURCE","NativeLineProgram","VS_SOURCE","locations","uDataPoints","uPointSize","uColor","uniform1i","projIdx","getUniformBlockIndex","uniformBlockBinding","LineProgram","uLineType","uStepLocation","uLineWidth","Step","SeriesSegmentVertexArray","dataBuffer","createTexture","bindTexture","TEXTURE_2D","texStorage2D","RG32F","texSubImage2D","RG","FLOAT","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","deleteTexture","syncPoints","n","bufferPos","dps","rowStart","floor","rowEnd","buffer","dp","bufferIdx","draw","renderInterval","first","last","count","activeTexture","TEXTURE0","drawArrays","TRIANGLE_STRIP","firstP","countP","NativeLine","LINE_STRIP","NativePoint","POINTS","SeriesVertexArray","segments","validStart","validEnd","popFront","popBack","newArray","pushFront","numDPtoAdd","activeArray","pushBack","deinit","syncBuffer","renderDomain","firstDP","lastDP","startInterval","endInterval","startArray","endArray","arrOffset","LineChartRenderer","lineProgram","nativeLineProgram","arrays","renderHeight","renderWidth","uboSize","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","uniformBuffer","drawFrame","vec2.fromValues","vec2.divide","syncDomain","ds","prog","uniform4fv","uniform1f","err","getError","NO_ERROR","m","xDomain","yDomain","lineChart","NearestPoint","svg","pModel","intersectPoints","container","adjustIntersectPoints","intersect","stroke","strokeWidth","Tooltip","chartOptions","tooltip","table","xItem","createItemElements","xLabel","tooltipRect","minPointerDistance","Number","POSITIVE_INFINITY","displayingX","px","dx","dy","dis","xFormatter","toLocaleString","label","exampleTd","itemElements","TimeChartTooltipPlugin","core","addDefaultPlugins"],"mappings":"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"}